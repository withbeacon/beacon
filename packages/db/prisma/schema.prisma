datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  websites      Website[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PageView {
  id            String      @id @default(cuid())
  name          String
  url           String
  referrer      String?
  visitDuration Int?        @map("visit_duration")
  events        Json?
  queryParams   Json?       @map("query_params")
  bounced       Boolean     @default(false)
  createdAt     DateTime    @default(now()) @map("created_at")
  sessionId     String      @map("session_id")
  session       UserSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  websiteId     String      @map("website_id")
  website       Website     @relation(fields: [websiteId], references: [id], onDelete: Cascade)
}

model UserSession {
  id        String     @id @default(cuid())
  expires   DateTime
  country   String?
  device    String?
  os        String
  browser   String?
  screen    String
  pageViews PageView[]
  live      Boolean    @default(false)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  websiteId String?    @map("website_id")
  website   Website?   @relation(fields: [websiteId], references: [id])
}

model Website {
  id        String        @id @default(cuid())
  url       String        @unique
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  name      String
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  public    Boolean       @default(false)
  sessions  UserSession[]
  pageViews PageView[]
}
